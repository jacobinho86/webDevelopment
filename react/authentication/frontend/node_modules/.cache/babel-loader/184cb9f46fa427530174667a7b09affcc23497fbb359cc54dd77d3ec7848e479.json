{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sacto\\\\OneDrive\\\\Documentos\\\\react\\\\01-starting-project\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function getTokenDuration() {\n  const storedExpirationDate = localStorage.getItem('expiration');\n  const expirationDate = new Date(storedExpirationDate);\n  const now = new Date();\n  const duration = expirationDate.getTime() - now.getTime();\n}\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams; //this is how one get a hold of the request parameters when the router hook can't be used\n  const mode = searchParams.get('mode') || 'login'; //if undefined, login is the default mode\n\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: 'Unsupported mode...'\n    }, {\n      status: 422\n    });\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Could not authenticate user...'\n    }, {\n      status: 500\n    });\n  }\n\n  //if we get to this point, we need to extract the token\n  const resData = await response.json();\n  const token = resData.token;\n\n  //store it in the local storage\n  localStorage.setItem('token', token);\n\n  //store the date that this token should be invalidated\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISOString());\n  return redirect('/');\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","getTokenDuration","storedExpirationDate","localStorage","getItem","expirationDate","Date","now","duration","getTime","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","ok","resData","token","setItem","expiration","setHours","getHours","toISOString","$RefreshReg$"],"sources":["C:/Users/sacto/OneDrive/Documentos/react/01-starting-project/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\n\nexport function getTokenDuration() {\n  const storedExpirationDate = localStorage.getItem('expiration');\n  const expirationDate = new Date(storedExpirationDate);\n  const now = new Date();\n  const duration = expirationDate.getTime() - now.getTime();\n}\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({request}) {\n  const searchParams = new URL(request.url).searchParams; //this is how one get a hold of the request parameters when the router hook can't be used\n  const mode = searchParams.get('mode') || 'login'; //if undefined, login is the default mode\n\n  if(mode !== 'login' && mode !== 'signup') {\n    throw json({message: 'Unsupported mode...'}, {status: 422});\n  }\n\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password'),\n  };\n\n  const response = await fetch('http://localhost:8080/'+mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n\n  if(response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  if(!response.ok) {\n    throw json({message: 'Could not authenticate user...'}, {status: 500});\n  }\n\n  //if we get to this point, we need to extract the token\n  const resData = await response.json();\n  const token = resData.token;\n\n  //store it in the local storage\n  localStorage.setItem('token',token);\n\n  //store the date that this token should be invalidated\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours()+1);\n  localStorage.setItem('expiration', expiration.toISOString());\n\n  return redirect('/');\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EACjC,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC/D,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACJ,oBAAoB,CAAC;EACrD,MAAMK,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACtB,MAAME,QAAQ,GAAGH,cAAc,CAACI,OAAO,CAAC,CAAC,GAAGF,GAAG,CAACE,OAAO,CAAC,CAAC;AAC3D;AAEA,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOV,OAAA,CAACF,QAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAE;EACtC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY,CAAC,CAAC;EACxD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC;;EAElD,IAAGD,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACxC,MAAMzB,IAAI,CAAC;MAAC2B,OAAO,EAAE;IAAqB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAC7D;EAEA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAACV,IAAI,EAAE;IAC1DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAGG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAE;IACrD,OAAOM,QAAQ;EACjB;EAEA,IAAG,CAACA,QAAQ,CAACO,EAAE,EAAE;IACf,MAAMzC,IAAI,CAAC;MAAC2B,OAAO,EAAE;IAAgC,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EACxE;;EAEA;EACA,MAAMc,OAAO,GAAG,MAAMR,QAAQ,CAAClC,IAAI,CAAC,CAAC;EACrC,MAAM2C,KAAK,GAAGD,OAAO,CAACC,KAAK;;EAE3B;EACApC,YAAY,CAACqC,OAAO,CAAC,OAAO,EAACD,KAAK,CAAC;;EAEnC;EACA,MAAME,UAAU,GAAG,IAAInC,IAAI,CAAC,CAAC;EAC7BmC,UAAU,CAACC,QAAQ,CAACD,UAAU,CAACE,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC;EAC5CxC,YAAY,CAACqC,OAAO,CAAC,YAAY,EAAEC,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC;EAE5D,OAAO/C,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAkB,EAAA;AAAA8B,YAAA,CAAA9B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}