{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sacto\\\\OneDrive\\\\Documentos\\\\react\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom'; //access to the data sent by the nearest loader function\nimport EventsList from '../components/EventsList';\nimport { json } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: data.events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/eventsasdff');\n  if (!response.ok) {\n    //return {isError: true, message: \"Couldn't fetch events data\"};\n    //throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status:500}); //when an error is thrown in a loader, react will rend the closest error element\n    throw json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","json","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","status","$RefreshReg$"],"sources":["C:/Users/sacto/OneDrive/Documentos/react/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom'; //access to the data sent by the nearest loader function\r\nimport EventsList from '../components/EventsList';\r\nimport { json } from 'react-router-dom';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n\r\n  if(data.isError){\r\n    return <p>{data.message}</p>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <EventsList events={data.events} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n  const response = await fetch('http://localhost:8080/eventsasdff');\r\n\r\n  if (!response.ok) {\r\n    //return {isError: true, message: \"Couldn't fetch events data\"};\r\n    //throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status:500}); //when an error is thrown in a loader, react will rend the closest error element\r\n    throw json({message: 'Could not fetch events'},{status:500});\r\n  } else {\r\n    return response;  \r\n  }\r\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB,CAAC,CAAC;AAClD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;EAE5B,IAAGS,IAAI,CAACC,OAAO,EAAC;IACd,oBAAON,OAAA;MAAAO,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EAEA,oBACEZ,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACH,UAAU;MAACgB,MAAM,EAAER,IAAI,CAACQ;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACnC,CAAC;AAEP;AAACR,EAAA,CAZQD,UAAU;EAAA,QACJP,aAAa;AAAA;AAAAkB,EAAA,GADnBX,UAAU;AAcnB,eAAeA,UAAU;AAEzB,OAAO,eAAeY,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;EAEjE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAMpB,IAAI,CAAC;MAACU,OAAO,EAAE;IAAwB,CAAC,EAAC;MAACW,MAAM,EAAC;IAAG,CAAC,CAAC;EAC9D,CAAC,MAAM;IACL,OAAOH,QAAQ;EACjB;AACF;AAAC,IAAAF,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}