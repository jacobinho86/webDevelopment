{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sacto\\\\OneDrive\\\\Documentos\\\\react\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom'; //access to the data sent by the nearest loader function\nimport EventsList from '../components/EventsList';\nimport { json } from 'react-router-dom';\nimport { defer } from 'react-router-dom';\nimport { Await } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return {isError: true, message: \"Couldn't fetch events data\"};\n    //throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status:500}); //when an error is thrown in a loader, react will rend the closest error element\n    throw json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    }); //this function builds responses with less effort\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  //the idea behind defer is to wait for a value, so the functions that execute in it should return a promise\n  return defer({\n    events: loadEvents() //EXECUTE, NOT JUST USE POINTER!!!!\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","json","defer","Await","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","events","children","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/sacto/OneDrive/Documentos/react/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom'; //access to the data sent by the nearest loader function\r\nimport EventsList from '../components/EventsList';\r\nimport { json } from 'react-router-dom';\r\nimport { defer } from 'react-router-dom';\r\nimport { Await } from 'react-router-dom';\r\n\r\nfunction EventsPage() {\r\n  const {events} = useLoaderData();\r\n\r\n\r\n  return (\r\n    <>\r\n      <Await resolve={events}></Await>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    //return {isError: true, message: \"Couldn't fetch events data\"};\r\n    //throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status:500}); //when an error is thrown in a loader, react will rend the closest error element\r\n    throw json({message: 'Could not fetch events'},{status:500}); //this function builds responses with less effort\r\n  } else {\r\n    return response;  \r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  //the idea behind defer is to wait for a value, so the functions that execute in it should return a promise\r\n  return defer({\r\n    events: loadEvents(), //EXECUTE, NOT JUST USE POINTER!!!!\r\n  });\r\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB,CAAC,CAAC;AAClD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGX,aAAa,CAAC,CAAC;EAGhC,oBACEM,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACEN,OAAA,CAACF,KAAK;MAACS,OAAO,EAAEF;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC,gBAChC,CAAC;AAEP;AAACP,EAAA,CATQD,UAAU;EAAA,QACAT,aAAa;AAAA;AAAAkB,EAAA,GADvBT,UAAU;AAWnB,eAAeA,UAAU;AAEzB,eAAeU,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAMpB,IAAI,CAAC;MAACqB,OAAO,EAAE;IAAwB,CAAC,EAAC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB;EACA,OAAOtB,KAAK,CAAC;IACXQ,MAAM,EAAEQ,UAAU,CAAC,CAAC,CAAE;EACxB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}