{"ast":null,"code":"//import {createStore} from 'redux';\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n//this part is a slice for redux toolkit\nconst counterSlice = createSlice({\n  name: 'counterState',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++; //here in toolkit you can mutate the state!!!\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n//logic of how to change the internal state\n// const counterReducer = (state = initialState, action) => {\n//     /*when we want to change the state, always do it in an inmutable manner, never mutate the existing state and return it that leads to bugs */\n\n//     if(action.type === 'increment'){\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         };\n//     } \n\n//     if(action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         };\n//     }\n\n//     if(action.type === 'toggle'){\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         };\n//     }\n\n//     return state;\n// };\n\n//this is where the app state is created\n//const store = createStore(counterReducer);\n\n//this is the way to create the global state app with the toolkit, it will merge all the reducers into one\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["C:/Users/sacto/OneDrive/Documentos/react/01-starting-project/src/store/index.js"],"sourcesContent":["//import {createStore} from 'redux';\r\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialCounterState = {counter:0, showCounter: true};\r\n\r\n\r\n//this part is a slice for redux toolkit\r\nconst counterSlice = createSlice({\r\n    name: 'counterState',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            state.counter++; //here in toolkit you can mutate the state!!!\r\n        },\r\n        decrement(state) {\r\n            state.counter--;\r\n        },\r\n        increase(state, action) {\r\n            state.counter = state.counter + action.payload;\r\n        },\r\n        toggleCounter(state) {\r\n            state.showCounter = !state.showCounter;\r\n        }\r\n    }\r\n});\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'authentication',\r\n    initialState:initialAuthState,\r\n    reducers: {\r\n\r\n        login(state){\r\n            state.isAuthenticated = true;\r\n        },\r\n\r\n        logout(state) {\r\n            state.isAuthenticated = false;\r\n        }\r\n    }\r\n});\r\n\r\n//logic of how to change the internal state\r\n// const counterReducer = (state = initialState, action) => {\r\n//     /*when we want to change the state, always do it in an inmutable manner, never mutate the existing state and return it that leads to bugs */\r\n\r\n//     if(action.type === 'increment'){\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     } \r\n\r\n//     if(action.type === 'decrement'){\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         };\r\n//     }\r\n\r\n//     if(action.type === 'toggle'){\r\n//         return {\r\n//             counter: state.counter,\r\n//             showCounter: !state.showCounter\r\n//         };\r\n//     }\r\n\r\n//     return state;\r\n// };\r\n\r\n//this is where the app state is created\r\n//const store = createStore(counterReducer);\r\n\r\n//this is the way to create the global state app with the toolkit, it will merge all the reducers into one\r\nconst store = configureStore({\r\n    reducer: { counter: counterSlice.reducer, auth: authSlice.reducer }\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\n\r\nexport default store;"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;;AAG1D;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE,CAAC,CAAC;IACrB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC1BK,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAACS,gBAAgB;EAC7BR,QAAQ,EAAE;IAENW,KAAKA,CAACT,KAAK,EAAC;MACRA,KAAK,CAACO,eAAe,GAAG,IAAI;IAChC,CAAC;IAEDG,MAAMA,CAACV,KAAK,EAAE;MACVA,KAAK,CAACO,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EACzBsB,OAAO,EAAE;IAAEnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAQ;AACtE,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAE5C,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}